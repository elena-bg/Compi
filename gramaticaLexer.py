# Generated from ./gramatica.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
        9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,4,27,166,
        8,27,11,27,12,27,167,1,27,5,27,171,8,27,10,27,12,27,174,9,27,1,28,
        1,28,5,28,178,8,28,10,28,12,28,181,9,28,1,28,1,28,1,29,4,29,186,
        8,29,11,29,12,29,187,1,30,4,30,191,8,30,11,30,12,30,192,1,30,1,30,
        4,30,197,8,30,11,30,12,30,198,1,30,3,30,202,8,30,1,31,4,31,205,8,
        31,11,31,12,31,206,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,3,32,220,8,32,1,179,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,1,0,5,2,0,65,90,97,122,1,0,48,57,2,0,70,
        70,102,102,3,0,9,10,13,13,32,32,2,0,60,60,62,62,232,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,69,1,0,0,0,5,71,1,0,0,0,7,79,
        1,0,0,0,9,87,1,0,0,0,11,92,1,0,0,0,13,96,1,0,0,0,15,100,1,0,0,0,
        17,105,1,0,0,0,19,109,1,0,0,0,21,115,1,0,0,0,23,120,1,0,0,0,25,123,
        1,0,0,0,27,129,1,0,0,0,29,132,1,0,0,0,31,136,1,0,0,0,33,142,1,0,
        0,0,35,144,1,0,0,0,37,146,1,0,0,0,39,148,1,0,0,0,41,150,1,0,0,0,
        43,152,1,0,0,0,45,154,1,0,0,0,47,156,1,0,0,0,49,158,1,0,0,0,51,160,
        1,0,0,0,53,162,1,0,0,0,55,165,1,0,0,0,57,175,1,0,0,0,59,185,1,0,
        0,0,61,190,1,0,0,0,63,204,1,0,0,0,65,219,1,0,0,0,67,68,5,123,0,0,
        68,2,1,0,0,0,69,70,5,125,0,0,70,4,1,0,0,0,71,72,5,112,0,0,72,73,
        5,114,0,0,73,74,5,111,0,0,74,75,5,103,0,0,75,76,5,114,0,0,76,77,
        5,97,0,0,77,78,5,109,0,0,78,6,1,0,0,0,79,80,5,119,0,0,80,81,5,114,
        0,0,81,82,5,105,0,0,82,83,5,116,0,0,83,84,5,101,0,0,84,85,5,108,
        0,0,85,86,5,110,0,0,86,8,1,0,0,0,87,88,5,109,0,0,88,89,5,97,0,0,
        89,90,5,105,0,0,90,91,5,110,0,0,91,10,1,0,0,0,92,93,5,101,0,0,93,
        94,5,110,0,0,94,95,5,100,0,0,95,12,1,0,0,0,96,97,5,118,0,0,97,98,
        5,97,0,0,98,99,5,114,0,0,99,14,1,0,0,0,100,101,5,118,0,0,101,102,
        5,111,0,0,102,103,5,105,0,0,103,104,5,100,0,0,104,16,1,0,0,0,105,
        106,5,105,0,0,106,107,5,110,0,0,107,108,5,116,0,0,108,18,1,0,0,0,
        109,110,5,102,0,0,110,111,5,108,0,0,111,112,5,111,0,0,112,113,5,
        97,0,0,113,114,5,116,0,0,114,20,1,0,0,0,115,116,5,101,0,0,116,117,
        5,108,0,0,117,118,5,115,0,0,118,119,5,101,0,0,119,22,1,0,0,0,120,
        121,5,105,0,0,121,122,5,102,0,0,122,24,1,0,0,0,123,124,5,119,0,0,
        124,125,5,104,0,0,125,126,5,105,0,0,126,127,5,108,0,0,127,128,5,
        101,0,0,128,26,1,0,0,0,129,130,5,100,0,0,130,131,5,111,0,0,131,28,
        1,0,0,0,132,133,5,102,0,0,133,134,5,111,0,0,134,135,5,114,0,0,135,
        30,1,0,0,0,136,137,5,119,0,0,137,138,5,114,0,0,138,139,5,105,0,0,
        139,140,5,116,0,0,140,141,5,101,0,0,141,32,1,0,0,0,142,143,5,43,
        0,0,143,34,1,0,0,0,144,145,5,45,0,0,145,36,1,0,0,0,146,147,5,42,
        0,0,147,38,1,0,0,0,148,149,5,47,0,0,149,40,1,0,0,0,150,151,5,37,
        0,0,151,42,1,0,0,0,152,153,5,40,0,0,153,44,1,0,0,0,154,155,5,41,
        0,0,155,46,1,0,0,0,156,157,5,61,0,0,157,48,1,0,0,0,158,159,5,59,
        0,0,159,50,1,0,0,0,160,161,5,44,0,0,161,52,1,0,0,0,162,163,5,58,
        0,0,163,54,1,0,0,0,164,166,7,0,0,0,165,164,1,0,0,0,166,167,1,0,0,
        0,167,165,1,0,0,0,167,168,1,0,0,0,168,172,1,0,0,0,169,171,7,1,0,
        0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,
        0,173,56,1,0,0,0,174,172,1,0,0,0,175,179,5,34,0,0,176,178,9,0,0,
        0,177,176,1,0,0,0,178,181,1,0,0,0,179,180,1,0,0,0,179,177,1,0,0,
        0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,5,34,0,0,183,58,1,0,0,
        0,184,186,7,1,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,
        0,187,188,1,0,0,0,188,60,1,0,0,0,189,191,7,1,0,0,190,189,1,0,0,0,
        191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,1,0,0,0,
        194,196,5,46,0,0,195,197,7,1,0,0,196,195,1,0,0,0,197,198,1,0,0,0,
        198,196,1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,202,7,2,0,0,
        201,200,1,0,0,0,201,202,1,0,0,0,202,62,1,0,0,0,203,205,7,3,0,0,204,
        203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,
        208,1,0,0,0,208,209,6,31,0,0,209,64,1,0,0,0,210,211,5,62,0,0,211,
        220,5,61,0,0,212,213,5,60,0,0,213,220,5,61,0,0,214,215,5,61,0,0,
        215,220,5,61,0,0,216,217,5,33,0,0,217,220,5,61,0,0,218,220,7,4,0,
        0,219,210,1,0,0,0,219,212,1,0,0,0,219,214,1,0,0,0,219,216,1,0,0,
        0,219,218,1,0,0,0,220,66,1,0,0,0,10,0,167,172,179,187,192,198,201,
        206,219,1,6,0,0
    ]

class gramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    Id = 28
    CTE_STRING = 29
    CTE_INT = 30
    CTE_FLOAT = 31
    WS = 32
    OP_REL = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'program'", "'writeln'", "'main'", "'end'", "'var'", 
            "'void'", "'int'", "'float'", "'else'", "'if'", "'while'", "'do'", 
            "'for'", "'write'", "'+'", "'-'", "'*'", "'/'", "'%'", "'('", 
            "')'", "'='", "';'", "','", "':'" ]

    symbolicNames = [ "<INVALID>",
            "Id", "CTE_STRING", "CTE_INT", "CTE_FLOAT", "WS", "OP_REL" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "Id", "CTE_STRING", "CTE_INT", "CTE_FLOAT", "WS", 
                  "OP_REL" ]

    grammarFileName = "gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


